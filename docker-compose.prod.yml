services:
  # ==============================================
  #  FRONTEND ANGULAR - EXPOSÉ À L'EXTÉRIEUR
  # ==============================================
  web:
    build:
      context: ./web
      dockerfile: Dockerfile.prod
      args:
        - API_URL=http://api:8080/api/v1
    container_name: immogestion_web_prod
    restart: unless-stopped
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    environment:
      - NGINX_HOST=yourdomain.com
      - NGINX_PORT=80
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`yourdomain.com`)"
      - "traefik.http.routers.web.tls=true"

  # ==============================================
  # API GO - INTERNE SEULEMENT
  # ==============================================
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.prod
    container_name: immogestion_api_prod
    restart: unless-stopped
    expose:
      - "8080"  # Pas de ports publics - interne seulement
    environment:
      - ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-immobilier_prod}
      - DB_USER=${DB_USER:-immobilier_user}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=https://yourdomain.com
      - LOG_LEVEL=info
      - MAX_CONNECTIONS=100
      - RATE_LIMIT=1000
      - BCRYPT_COST=12
    volumes:
      - api_logs:/app/logs
      - api_uploads:/app/uploads
    networks:
      - backend_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    security_opt:
      - no-new-privileges:true
    user: "1001:1001"

  # ==============================================
  #  BASE DE DONNÉES POSTGRESQL
  # ==============================================
  postgres:
    image: postgres:16-alpine
    container_name: immogestion_postgres_prod
    restart: unless-stopped
    expose:
      - "5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-immobilier_prod}
      - POSTGRES_USER=${DB_USER:-immobilier_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
      - POSTGRES_HOST_AUTH_METHOD=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-immobilier_user} -d ${DB_NAME:-immobilier_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # ==============================================
  #  REDIS CACHE
  # ==============================================
  redis:
    image: redis:7-alpine
    container_name: immogestion_redis_prod
    restart: unless-stopped
    expose:
      - "6379"
    command: >
      redis-server 
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    security_opt:
      - no-new-privileges:true

  # ==============================================
  #  MONITORING OPTIONNEL
  # ==============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: immogestion_prometheus_prod
    restart: unless-stopped
    expose:
      - "9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - monitoring_network
      - backend_network
    profiles:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: immogestion_grafana_prod
    restart: unless-stopped
    expose:
      - "3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - monitoring_network
    profiles:
      - monitoring
    depends_on:
      - prometheus

# ==============================================
#  RÉSEAUX
# ==============================================
networks:
  frontend_network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: br_frontend
  
  backend_network:
    driver: bridge
    internal: true  # Réseau interne seulement
    driver_opts:
      com.docker.network.bridge.name: br_backend
  
  monitoring_network:
    driver: bridge
    internal: true
    driver_opts:
      com.docker.network.bridge.name: br_monitoring

# ==============================================
#  VOLUMES PERSISTANTS
# ==============================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/immogestion/data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/immogestion/data/redis
  
  api_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/immogestion/logs
  
  api_uploads:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/immogestion/uploads
  
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local